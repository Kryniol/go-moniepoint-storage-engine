// Code generated by mockery v2.52.2. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockLeaderDataFetcher is an autogenerated mock type for the LeaderDataFetcher type
type MockLeaderDataFetcher struct {
	mock.Mock
}

// FetchAll provides a mock function with given fields: ctx
func (_m *MockLeaderDataFetcher) FetchAll(ctx context.Context) (map[string][]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FetchAll")
	}

	var r0 map[string][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[string][]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[string][]byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchSince provides a mock function with given fields: ctx, since
func (_m *MockLeaderDataFetcher) FetchSince(ctx context.Context, since time.Time) (map[string][]byte, error) {
	ret := _m.Called(ctx, since)

	if len(ret) == 0 {
		panic("no return value specified for FetchSince")
	}

	var r0 map[string][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) (map[string][]byte, error)); ok {
		return rf(ctx, since)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Time) map[string][]byte); ok {
		r0 = rf(ctx, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Time) error); ok {
		r1 = rf(ctx, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockLeaderDataFetcher creates a new instance of MockLeaderDataFetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLeaderDataFetcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLeaderDataFetcher {
	mock := &MockLeaderDataFetcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
