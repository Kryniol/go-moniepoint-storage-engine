// Code generated by mockery v2.52.2. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockStorageEngine is an autogenerated mock type for the StorageEngine type
type MockStorageEngine struct {
	mock.Mock
}

// BatchPut provides a mock function with given fields: ctx, data
func (_m *MockStorageEngine) BatchPut(ctx context.Context, data map[string][]byte) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for BatchPut")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string][]byte) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, key
func (_m *MockStorageEngine) Delete(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Put provides a mock function with given fields: ctx, key, data
func (_m *MockStorageEngine) Put(ctx context.Context, key string, data []byte) error {
	ret := _m.Called(ctx, key, data)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []byte) error); ok {
		r0 = rf(ctx, key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Read provides a mock function with given fields: ctx, key
func (_m *MockStorageEngine) Read(ctx context.Context, key string) ([]byte, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]byte, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadKeyRange provides a mock function with given fields: ctx, startKey, endKey
func (_m *MockStorageEngine) ReadKeyRange(ctx context.Context, startKey string, endKey string) (map[string][]byte, error) {
	ret := _m.Called(ctx, startKey, endKey)

	if len(ret) == 0 {
		panic("no return value specified for ReadKeyRange")
	}

	var r0 map[string][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (map[string][]byte, error)); ok {
		return rf(ctx, startKey, endKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) map[string][]byte); ok {
		r0 = rf(ctx, startKey, endKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, startKey, endKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadSince provides a mock function with given fields: ctx, since
func (_m *MockStorageEngine) ReadSince(ctx context.Context, since *time.Time) (map[string][]byte, error) {
	ret := _m.Called(ctx, since)

	if len(ret) == 0 {
		panic("no return value specified for ReadSince")
	}

	var r0 map[string][]byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *time.Time) (map[string][]byte, error)); ok {
		return rf(ctx, since)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *time.Time) map[string][]byte); ok {
		r0 = rf(ctx, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *time.Time) error); ok {
		r1 = rf(ctx, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockStorageEngine creates a new instance of MockStorageEngine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorageEngine(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorageEngine {
	mock := &MockStorageEngine{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
