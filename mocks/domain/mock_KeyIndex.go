// Code generated by mockery v2.52.2. DO NOT EDIT.

package domain

import (
	context "context"

	domain "github.com/Kryniol/go-moniepoint-storage-engine/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockKeyIndex is an autogenerated mock type for the KeyIndex type
type MockKeyIndex struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, entry
func (_m *MockKeyIndex) Add(ctx context.Context, entry domain.IndexEntry) error {
	ret := _m.Called(ctx, entry)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.IndexEntry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx, key
func (_m *MockKeyIndex) Find(ctx context.Context, key string) (*domain.IndexEntry, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *domain.IndexEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.IndexEntry, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.IndexEntry); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.IndexEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockKeyIndex creates a new instance of MockKeyIndex. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeyIndex(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeyIndex {
	mock := &MockKeyIndex{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
